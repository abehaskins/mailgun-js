#!/usr/bin/env node

const templates = {
    namespace: `declare module "{{name}}" {
{{exported_declarations}}
}\n\n
{{other_declarations}}`,
    class: `declare class {{name}} {
{{methods}}
}`,
    method: `   {{name}}({{args}}): {{return_type}};`
}
const definitions = require("../src/schema").definitions;
const methods = [];
const classes = [];

for (var name in definitions) {
    var data = definitions[name];
    var title = toTitle(name);

    methods.push(render(templates.method, {
        name,
        return_type: title,
        args: ""
    }))

    classes.push(render(templates.class, {
        name: title,
        methods: data.links.map((link) => {
            const title = toCamelCase(link.title);

            var args = "opts: {" + Object.keys(link.properties || {}).map((key) => {
                var title = toCamelCase(key);
                var type_ = link.properties[key].type;

                if (type_ == "array") {
                    type_ = "any[]";
                }

                var required = (link.required || []).indexOf(key) == -1? "?" : "";
                return `${title}${required}: ${type_}`;
            }).join(", ") + "}, ";

            if (args == "opts: {}, ") args = "";
            args += "callback: Function";

            return render(templates.method, {
                name: title,
                return_type: "any",
                args
            });
        }).join("\n")
    }))
}

const exported_declarations = render(templates.class, {
    name: "MailgunClient",
    methods: methods.join("\n")
});

const other_declarations = classes.join("\n\n");

console.log(render(templates.namespace, {
    name: "mailgun-js",
    exported_declarations,
    other_declarations
}));

function render(template, data) {
    Object.keys(data).forEach((key) => {
        const value = data[key];
        const re = new RegExp(`\{\{${key}\}\}`, "g");
        template = template.replace(re, value);
    });
    return template;
}

function toTitle(str) {
    return str[0].toUpperCase() + str.slice(1, str.length);
}

function toCamelCase(str) {
    return str.split("-").map((word, index) => {
        if (index == 0) return word;
        return toTitle(word);
    }).join("");
}